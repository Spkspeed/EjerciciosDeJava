POO
Interfaz: Es un adaptador que solamente contiene metodos vacios y es necesario para poder utilizar  la clase que queremos implementar. (List > ArrayList)
Clase abstracta: Codigo en comun para un grupo de implementaciones de objetos, solo puede ser heredada una vez. Y sus metodos pueden overrideados(modificados). Es la informacion basica en comun que deben posser dichas clases.
Enum: Es una clase basica que permite crear enumadores
Synchronized: se lo utiliza para aquellos procesos que requieren controlar la informacion con un thread a la vez, como consecuencia, los demas threads de la aplicacion quedan detenidos para centrarse en realizar uno, reduciendo asi, la eficiencia del programa. (ejmplo: hilos entrando por cola uno por uno).
 
Framework:  es un conjunto de clases e interfaces que proporcionan una arquitectura lista para usarse. No es necesario definirlo para implementar clases o objetos pero siempre esta presente en los projectos que incluyan la POO.
Collection Framework: en java, un framework separado fue establecido en eL JDK para que las herramientas esten disponibles por defecto.
DIFERENCIAS ENTRE LAS DISTINTAS INTERFACES
Collection: la collection en java es un almacen de objetos individuales que tienen sus propias interfaces para poder implementarlas por separado. Las cuales son:
Set: sirve para almacenar elementos no repetidos, que esta desordenados u ordenados.
HashSet -> No permite valores duplicados y estan desordenados. (Exetension LinkedHashSet())
LinkedHashSet() -> TreeSet() --extension --> naviagableSet-impementacion-> SortedSet(Comparable)
------------------------------------------------------------------------------------------------
List:sirve para almacenar elementos de forma ordenada a los cuales se puede acceder a cualquiera de forma aleatoria.
     Arraylist -> Permite valores duplicados y es rapido para obtener y modificar elemento y           no es synchronized
     Vector -> Antiguo, ya no es usado porque es (Synchronized)
     LinkedList -> Mejor para remover y agregar elementos pero es lento para obtener y modificar elementos.
-----------------------------------------------------------------------------------------------
Map: es utilizada para para almacenar elementos asignandoles una clave necesaria para acceder al tipo de valor que contienen, el cual, puede ser de cualquier tipo y no puede haber claves repetidas. Ninguna de sus implementaciones utilizan sincronizacion.
HashMap: este implementación almacena las claves en una tabla hash. Es la implementación con mejor rendimiento de todas pero no garantiza ningún orden a la hora de realizar iteraciones. Esta implementación proporciona tiempos constantes en las operaciones básicas siempre y cuando la función hash disperse de forma correcta los elementos dentro de la tabla hash. Es importante definir el tamaño inicial de la tabla ya que este tamaño marcará el rendimiento de esta implementación.
TreeMap: esta implementación almacena las claves ordenándolas en función de sus valores. Es bastante más lento que HashMap. Las claves almacenadas deben implementar la interfaz Comparable. Esta implementación garantiza, siempre, un rendimiento de log(N) en las operaciones básicas, debido a la estructura de árbol empleada para almacenar los elementos.
LinkedHashMap: esta implementación almacena las claves en función del orden de inserción. Es, simplemente, un poco más costosa que HashMap.
--------------------------------------
MAVEN
1.- se utiliza para llevar el control de los ciclos de construccion sobre el codigo que construimos.
2.- Que son los ciclos de vida: las diferentes etapas del proceso que lleva a cabo un codigo y en las que podemos interferir.
    clean:
    compile:
    test:
    package:
    verify:
    install:
3.- Que son los modulos: son las herramientas que nos permiten poder realizar las diferentes
    funcionalidades correctamente (usar redes, conexiones a bases de datos, sistemas de seguridad).
4.- Que comandos se usan en maven por linea de comandos:
     mvn clean install:
     mvn package:
     mvn compile:
     mvn spring-boot:run:
     mvn clean install -Dmaven.test.skip=true
--------------------------------------
Spring Context: es el espacio en memoria donde se levanta el framework de spring y donde sus componenetes trabajan. 
Spring: es una bibloteca de aplicaciones que nos permite utilizar una variedad de herramientas y desplegar aplicaciones utilizando tomcat. Tambien podemos acceder a otros servicios más, sin tener que escribir el código de manera manual.  Permite el acceso de objetos a determinados usuarios.. Por ejemplo con las anotaciones o por XML..
@Anotation: las anotation en java son uno de los metodos que utilizamos  para poder conseguir informacion y agregarla al codigo fuente. Pueden ser datos que necesita un proceso cuando se ejecuta. por ejemplo clases, métodos, metadatos, campos, parámetros, variables locales, y paquetes.
dependencias: descarga las herramientas para que esten a nuestra disposicion de forma automatica. 
scope: limite de la realizacion del proceso.
spring data, jpa, boot, frameworks, definiciones

Spring FrameWork:definiciones
    https://spring.io/projects/spring-framework

    Transactions:definiciones
        Extender explicacion:definiciones
        Ejecutar operaciones de forma
        Transactional: lleva a cabo un conjunto de operaciones encapsuladas en un proceso que solo se materializan si la
        transaccion: se completa de forma satisfactoria.
        Rollbackear: cuando una transaccion falla, a pesar de todos los cambios hechos, todo se vuelve para atras, hasta  volver al punto de inicio.
    Dependency injection: 

Explicar para que sirve cada annotation y en que parte de la orquestacion se debe colocar:

 @Autowired, @Service, (@Repository @Component) Como funciona el autowired desde un test unitario hasta conectarse con un repositorio?

    Spring bean: es una unidad instanciada inyectable de spring para que sea utilizada en los componentes donde querramos utilizarla, por defecto suelen ser singleton.

Spring Data
    https://spring.io/projects/spring-data

    Spring JPA
        Base datos, se pueden obtener de las siguientes formas:
        LAZY: obtiene el valor del propiedades de primer nivel, las relationship no se traen en este caso, para que sean traidas debemos estar en una transaccion.
        EAGER: obtiene toda la informacion relacionada al dato que indicamos y trae todas la relationship que esta anclada a esta informacion.

        OneToMany
        OneToOne
        ManyToOne
        ManyToMany como se arma?

        @Entity: Explicar

Spring Boot
        Create stand-alone Spring applications: nos permite ejecutar aplicaciones de forma que podamos probarlas en el momento realizando minimos cambios en la configuracion. Embed "Tomcat", "Jetty" or Undertow directly (no need to deploy WAR files): podemos desplegar un servidor web al instante sin tener que llevar a cabo un largo proceso de configuracion para lograrlo como sucedia cuando creaba un archivo war, ahora solo crea un jar autoejecutable.

        Provide opinionated 'starter' dependencies to simplify your build configuration: nos ayuda a simplificar el manejo de las dependencias de diferentes componentes con solo agregarlas en la configuracion de maven or graddle. "La inyección de dependencias"

        Automatically configure Spring and 3rd party libraries whenever possible: nos ayuda a configurar de manera  automatica los componentes que agregamos para que podamos utilizarlas en cualquier momento con solo llamarlas.

        Provide production-ready features such as metrics, health checks, and externalized configuration: nos otorga un componente en nuestra aplicacion que nos informa el estado de la aplicacion corriendo con diferentes metricas
        https://www.callicoder.com/spring-boot-actuator/

        Absolutely no code generation and no requirement for XML configuration: ya no se usa autogeneracion de codigo ni configuracion por xml para los beans.
